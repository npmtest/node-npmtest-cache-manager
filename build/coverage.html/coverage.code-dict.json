{"/home/travis/build/npmtest/node-npmtest-cache-manager/test.js":"/* istanbul instrument in package npmtest_cache_manager */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cache-manager/lib.npmtest_cache_manager.js":"/* istanbul instrument in package npmtest_cache_manager */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_cache_manager = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_cache_manager = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-cache-manager/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-cache-manager && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_cache_manager */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_cache_manager\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_cache_manager.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_cache_manager.rollup.js'] =\n            local.assetsDict['/assets.npmtest_cache_manager.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_cache_manager.__dirname + '/lib.npmtest_cache_manager.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cache-manager/node_modules/cache-manager/index.js":"module.exports = require('./lib');\n","/home/travis/build/npmtest/node-npmtest-cache-manager/node_modules/cache-manager/lib/index.js":"/** @namespace cacheManager */\nvar cacheManager = {\n    caching: require('./caching'),\n    multiCaching: require('./multi_caching')\n};\n\nmodule.exports = cacheManager;\n","/home/travis/build/npmtest/node-npmtest-cache-manager/node_modules/cache-manager/lib/caching.js":"/** @module cacheManager/caching */\n/*jshint maxcomplexity:15*/\nvar CallbackFiller = require('./callback_filler');\n\n/**\n * Generic caching interface that wraps any caching library with a compatible interface.\n *\n * @param {object} args\n * @param {object|string} args.store - The store must at least have `set` and a `get` functions.\n * @param {function} [args.isCacheableValue] - A callback function which is called\n *   with every value returned from cache or from a wrapped function. This lets you specify\n *   which values should and should not be cached. If the function returns true, it will be\n *   stored in cache. By default it caches everything except undefined.\n */\nvar caching = function(args) {\n    args = args || {};\n    var self = {};\n    if (typeof args.store === 'object') {\n        if (args.store.create) {\n            self.store = args.store.create(args);\n        } else {\n            self.store = args.store;\n        }\n    } else {\n        var storeName = args.store || 'memory';\n        self.store = require('./stores/' + storeName).create(args);\n    }\n\n    // do we handle a cache error the same as a cache miss?\n    self.ignoreCacheErrors = args.ignoreCacheErrors || false;\n\n    var Promise = args.promiseDependency || global.Promise;\n\n    var callbackFiller = new CallbackFiller();\n\n    if (typeof args.isCacheableValue === 'function') {\n        self._isCacheableValue = args.isCacheableValue;\n    } else if (typeof self.store.isCacheableValue === 'function') {\n        self._isCacheableValue = self.store.isCacheableValue;\n    } else {\n        self._isCacheableValue = function(value) {\n            return value !== undefined;\n        };\n    }\n\n    function wrapPromise(key, promise, options) {\n        return new Promise(function(resolve, reject) {\n            self.wrap(key, function(cb) {\n                Promise.resolve()\n                .then(promise)\n                .then(function(result) {\n                    cb(null, result);\n                })\n                .catch(cb);\n            }, options, function(err, result) {\n                if (err) {\n                    return reject(err);\n                }\n                resolve(result);\n            });\n        });\n    }\n\n    /**\n     * Wraps a function in cache. I.e., the first time the function is run,\n     * its results are stored in cache so subsequent calls retrieve from cache\n     * instead of calling the function.\n     *\n     * @function\n     * @name wrap\n     *\n     * @param {string} key - The cache key to use in cache operations\n     * @param {function} work - The function to wrap\n     * @param {object} [options] - options passed to `set` function\n     * @param {function} cb\n     *\n     * @example\n     *   var key = 'user_' + userId;\n     *   cache.wrap(key, function(cb) {\n     *       User.get(userId, cb);\n     *   }, function(err, user) {\n     *       console.log(user);\n     *   });\n     */\n    self.wrap = function(key, work, options, cb) {\n        if (typeof options === 'function') {\n            cb = options;\n            options = {};\n        }\n\n        if (!cb) {\n            return wrapPromise(key, work, options);\n        }\n\n        var hasKey = callbackFiller.has(key);\n        callbackFiller.add(key, {cb: cb});\n        if (hasKey) { return; }\n\n        self.store.get(key, options, function(err, result) {\n            if (err && (!self.ignoreCacheErrors)) {\n                callbackFiller.fill(key, err);\n            } else if (self._isCacheableValue(result)) {\n                callbackFiller.fill(key, null, result);\n            } else {\n                work(function(err, data) {\n                    if (err) {\n                        callbackFiller.fill(key, err);\n                        return;\n                    }\n\n                    if (!self._isCacheableValue(data)) {\n                        callbackFiller.fill(key, null, data);\n                        return;\n                    }\n\n                    if (options && typeof options.ttl === 'function') {\n                        options.ttl = options.ttl(data);\n                    }\n\n                    self.store.set(key, data, options, function(err) {\n                        if (err && (!self.ignoreCacheErrors)) {\n                            callbackFiller.fill(key, err);\n                        } else {\n                            callbackFiller.fill(key, null, data);\n                        }\n                    });\n                });\n            }\n        });\n    };\n\n    /**\n     * Binds to the underlying store's `get` function.\n     * @function\n     * @name get\n     */\n    self.get = self.store.get.bind(self.store);\n\n    /**\n     * Binds to the underlying store's `set` function.\n     * @function\n     * @name set\n     */\n    self.set = self.store.set.bind(self.store);\n\n    /**\n     * Binds to the underlying store's `del` function if it exists.\n     * @function\n     * @name del\n     */\n    if (typeof self.store.del === 'function') {\n        self.del = self.store.del.bind(self.store);\n    }\n\n    /**\n     * Binds to the underlying store's `setex` function if it exists.\n     * @function\n     * @name setex\n     */\n    if (typeof self.store.setex === 'function') {\n        self.setex = self.store.setex.bind(self.store);\n    }\n\n    /**\n     * Binds to the underlying store's `reset` function if it exists.\n     * @function\n     * @name reset\n     */\n    if (typeof self.store.reset === 'function') {\n        self.reset = self.store.reset.bind(self.store);\n    }\n\n    /**\n     * Binds to the underlying store's `keys` function if it exists.\n     * @function\n     * @name keys\n     */\n    if (typeof self.store.keys === 'function') {\n        self.keys = self.store.keys.bind(self.store);\n    }\n\n    /**\n     * Binds to the underlying store's `ttl` function if it exists.\n     * @function\n     * @name ttl\n     */\n    if (typeof self.store.ttl === 'function') {\n        self.ttl = self.store.ttl.bind(self.store);\n    }\n\n    return self;\n};\n\nmodule.exports = caching;\n","/home/travis/build/npmtest/node-npmtest-cache-manager/node_modules/cache-manager/lib/callback_filler.js":"function CallbackFiller() {\n    this.queues = {};\n}\n\nCallbackFiller.prototype.fill = function(key, err, data) {\n    var waiting = this.queues[key];\n    delete this.queues[key];\n\n    if (waiting && waiting.length) {\n        waiting.forEach(function(task) {\n            (task.cb)(err, data);\n        });\n    }\n};\n\nCallbackFiller.prototype.has = function(key) {\n    return this.queues[key];\n};\n\nCallbackFiller.prototype.add = function(key, funcObj) {\n    if (this.queues[key]) {\n        this.queues[key].push(funcObj);\n    } else {\n        this.queues[key] = [funcObj];\n    }\n};\n\nmodule.exports = CallbackFiller;\n","/home/travis/build/npmtest/node-npmtest-cache-manager/node_modules/cache-manager/lib/multi_caching.js":"/** @module cacheManager/multiCaching */\nvar async = require('async');\nvar CallbackFiller = require('./callback_filler');\n\n/**\n * Module that lets you specify a hierarchy of caches.\n *\n * @param {array} caches - Array of caching objects.\n * @param {object} [options]\n * @param {function} [options.isCacheableValue] - A callback function which is called\n *   with every value returned from cache or from a wrapped function. This lets you specify\n *   which values should and should not be cached. If the function returns true, it will be\n *   stored in cache. By default it caches everything except undefined.\n *\n *   If an underlying cache specifies its own isCacheableValue function, that function will\n *   be used instead of the multiCaching's _isCacheableValue function.\n */\nvar multiCaching = function(caches, options) {\n    var self = {};\n    options = options || {};\n\n    var Promise = options.promiseDependency || global.Promise;\n\n    if (!Array.isArray(caches)) {\n        throw new Error('multiCaching requires an array of caches');\n    }\n\n    var callbackFiller = new CallbackFiller();\n\n    if (typeof options.isCacheableValue === 'function') {\n        self._isCacheableValue = options.isCacheableValue;\n    } else {\n        self._isCacheableValue = function(value) {\n            return value !== undefined;\n        };\n    }\n\n    /**\n     * If the underlying cache specifies its own isCacheableValue function (such\n     * as how node-cache-manager-redis does), use that function, otherwise use\n     * self._isCacheableValue function.\n     */\n    function getIsCacheableValueFunction(cache) {\n        if (cache.store && typeof cache.store.isCacheableValue === 'function') {\n            return cache.store.isCacheableValue;\n        } else {\n            return self._isCacheableValue;\n        }\n    }\n\n    function getFromHighestPriorityCachePromise(key, options) {\n        return new Promise(function(resolve, reject) {\n            getFromHighestPriorityCache(key, options, function(err, result) {\n                if (err) {\n                    return reject(err);\n                }\n                resolve(result);\n            });\n        });\n    }\n\n    function getFromHighestPriorityCache(key, options, cb) {\n        if (typeof options === 'function') {\n            cb = options;\n            options = {};\n        }\n\n        if (!cb) {\n            return getFromHighestPriorityCachePromise(key, options);\n        }\n\n        var i = 0;\n        async.eachSeries(caches, function(cache, next) {\n            var callback = function(err, result) {\n                if (err) {\n                    return next(err);\n                }\n\n                var _isCacheableValue = getIsCacheableValueFunction(cache);\n\n                if (_isCacheableValue(result)) {\n                    // break out of async loop.\n                    return cb(err, result, i);\n                }\n\n                i += 1;\n                next();\n            };\n\n            cache.store.get(key, options, callback);\n        }, function(err, result) {\n            return cb(err, result);\n        });\n    }\n\n    function setInMultipleCachesPromise(caches, opts) {\n        return new Promise(function(resolve, reject) {\n            setInMultipleCaches(caches, opts, function(err, result) {\n                if (err) {\n                    return reject(err);\n                }\n                resolve(result);\n            });\n        });\n    }\n\n    function setInMultipleCaches(caches, opts, cb) {\n        opts.options = opts.options || {};\n\n        if (!cb) {\n            return setInMultipleCachesPromise(caches, opts);\n        }\n\n        async.each(caches, function(cache, next) {\n            var _isCacheableValue = getIsCacheableValueFunction(cache);\n\n            if (_isCacheableValue(opts.value)) {\n                cache.store.set(opts.key, opts.value, opts.options, next);\n            } else {\n                next();\n            }\n        }, function(err, result) {\n            cb(err, result);\n        });\n    }\n\n    function getAndPassUpPromise(key) {\n        return new Promise(function(resolve, reject) {\n            self.getAndPassUp(key, function(err, result) {\n                if (err) {\n                    return reject(err);\n                }\n                resolve(result);\n            });\n        });\n    }\n\n    /**\n     * Looks for an item in cache tiers.\n     * When a key is found in a lower cache, all higher levels are updated.\n     *\n     * @param {string} key\n     * @param {function} cb\n     */\n    self.getAndPassUp = function(key, cb) {\n        if (!cb) {\n            return getAndPassUpPromise(key);\n        }\n\n        getFromHighestPriorityCache(key, function(err, result, index) {\n            if (err) {\n                return cb(err);\n            }\n\n            if (index) {\n                var cachesToUpdate = caches.slice(0, index);\n                async.each(cachesToUpdate, function(cache, next) {\n                    var _isCacheableValue = getIsCacheableValueFunction(cache);\n                    if (_isCacheableValue(result)) {\n                        // We rely on the cache module's default TTL\n                        cache.set(key, result, next);\n                    }\n                });\n            }\n\n            return cb(err, result);\n        });\n    };\n\n    function wrapPromise(key, promise, options) {\n        return new Promise(function(resolve, reject) {\n            self.wrap(key, function(cb) {\n                Promise.resolve()\n                .then(promise)\n                .then(function(result) {\n                    cb(null, result);\n                })\n                .catch(cb);\n            }, options, function(err, result) {\n                if (err) {\n                    return reject(err);\n                }\n                resolve(result);\n            });\n        });\n    }\n\n    /**\n     * Wraps a function in one or more caches.\n     * Has same API as regular caching module.\n     *\n     * If a key doesn't exist in any cache, it gets set in all caches.\n     * If a key exists in a high-priority (e.g., first) cache, it gets returned immediately\n     * without getting set in other lower-priority caches.\n     * If a key doesn't exist in a higher-priority cache but exists in a lower-priority\n     * cache, it gets set in all higher-priority caches.\n     *\n     * @param {string} key - The cache key to use in cache operations\n     * @param {function} work - The function to wrap\n     * @param {object} [options] - options passed to `set` function\n     * @param {function} cb\n     */\n    self.wrap = function(key, work, options, cb) {\n        if (typeof options === 'function') {\n            cb = options;\n            options = {};\n        }\n\n        function getOptsForSet(value) {\n            return {\n                key: key,\n                value: value,\n                options: options\n            };\n        }\n\n        if (!cb) {\n            return wrapPromise(key, work, options);\n        }\n\n        var hasKey = callbackFiller.has(key);\n        callbackFiller.add(key, {cb: cb});\n        if (hasKey) { return; }\n\n        getFromHighestPriorityCache(key, function(err, result, index) {\n            if (err) {\n                return callbackFiller.fill(key, err);\n            } else if (self._isCacheableValue(result)) {\n                var cachesToUpdate = caches.slice(0, index);\n                var opts = getOptsForSet(result);\n\n                setInMultipleCaches(cachesToUpdate, opts, function(err) {\n                    callbackFiller.fill(key, err, result);\n                });\n            } else {\n                work(function(err, data) {\n                    if (err) {\n                        return callbackFiller.fill(key, err);\n                    }\n\n                    if (!self._isCacheableValue(data)) {\n                        return cb();\n                    }\n\n                    var opts = getOptsForSet(data);\n\n                    setInMultipleCaches(caches, opts, function(err) {\n                        callbackFiller.fill(key, err, data);\n                    });\n                });\n            }\n        });\n    };\n\n    /**\n     * Set value in all caches\n     *\n     * @function\n     * @name set\n     *\n     * @param {string} key\n     * @param {*} value\n     * @param {object} [options] to pass to underlying set function.\n     * @param {function} [cb]\n     */\n    self.set = function(key, value, options, cb) {\n        if (typeof options === 'function') {\n            cb = options;\n            options = {};\n        }\n\n        var opts = {\n            key: key,\n            value: value,\n            options: options\n        };\n\n        return setInMultipleCaches(caches, opts, cb);\n    };\n\n    /**\n     * Get value from highest level cache that has stored it.\n     *\n     * @function\n     * @name get\n     *\n     * @param {string} key\n     * @param {object} [options] to pass to underlying get function.\n     * @param {function} cb\n     */\n    self.get = function(key, options, cb) {\n        if (typeof options === 'function') {\n            cb = options;\n            options = {};\n        }\n\n        return getFromHighestPriorityCache(key, options, cb);\n    };\n\n    /**\n     * Delete value from all caches.\n     *\n     * @function\n     * @name del\n     *\n     * @param {string} key\n     * @param {object} [options] to pass to underlying del function.\n     * @param {function} cb\n     */\n    self.del = function(key, options, cb) {\n        if (typeof options === 'function') {\n            cb = options;\n            options = {};\n        }\n\n        async.each(caches, function(cache, next) {\n            cache.store.del(key, options, next);\n        }, cb);\n    };\n\n    /**\n     * Reset all caches.\n     *\n     * @function\n     * @name reset\n     *\n     * @param {function} cb\n     */\n    self.reset = function(cb) {\n        async.each(caches, function(cache, next) {\n            cache.store.reset(next);\n        }, cb);\n    };\n\n    return self;\n};\n\nmodule.exports = multiCaching;\n"}